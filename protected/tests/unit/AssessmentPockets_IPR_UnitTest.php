<?php
/**
 * Created by PhpStorm.
 * User: slavka
 * Date: 5/13/14
 * Time: 2:14 PM
 */

class AssessmentPockets_IPR_UnitTest extends CDbTestCase {

    use UnitTestBaseTrait;

    /**
     * Нижняя гарница первого кармана - 'плохо'
     */
    public function testTextForInfoGraphic_1() {

        $scenarioFull = Scenario::model()->findByAttributes(['slug' => Scenario::TYPE_FULL]);

        $simulation = new Simulation();
        $simulation->assessment_version === Simulation::ASSESSMENT_VERSION_2;
        $simulation->game_type = $scenarioFull;

        $simulation->behaviours_cache = serialize(
            [
                '3214'  => '0',
                '3216'  => '0',
                '3218'  => '0',
                '3311'  => '0',
                '3312'  => '0',
                '3313'  => '0',
                '3322'  => '0',
                '3323'  => '0',
                '3324'  => '-1000',
                '3326'  => '0',
                '3332'  => '0',
                '3333'  => '0',
                '4121'  => '0',
                '4122'  => '0',
                '4123'  => '-1000',
                '4124'  => '0',
                '4125'  => '0',
                '4126'  => '-1000',
                '4127'  => '0',
                '4141'  => '0',
                '4143'  => '0',
                '4144'  => '-1000',
                '4145'  => '-1000',
                '4151'  => '-1000',
                '4152'  => '-1000',
                '4153'  => '0',
                '214a1' => '0',
                '214a3' => '0',
                '214a4' => '0',
                '214a5' => '0',
                '214a8' => '-4',
                '214b0' => '0',
                '214b1' => '0',
                '214b2' => '0',
                '214b3' => '0',
                '214b5' => '-1000',
                '214b6' => '-1000',
                '214b8' => '-1000',
                '214b9' => '0',
                '214d0' => '0',
                '214d1' => '0',
                '214d2' => '0',
                '214d3' => '0',
                '214d4' => '0',
                '214d5' => '-1000',
                '214d6' => '-1000',
                '214d8' => '-1000',
                '214g0' => '-1000',
                '214g1' => '-1000',
                '341a8' => '0',
                '341b1' => '0',
                '341b5' => '0',
                '341b7' => '0',
                '351a1' => '0',
                '351a2' => '-1000',
                '351b1' => '0',
                '351b3' => '0',
                '351b2' => '0',
                '351c1' => '0',
                '351c2' => '0',
                '351c3' => '0',
            ]
        );

        $results = SimulationResultTextService::generate($simulation, 'recommendation');

//        foreach (unserialize($simulation->behaviours_cache) as $key => $value) {
//            $this->getArray($results, $key);
//        }
//        die();

        $this->assertEquals(
            $results['3214'],
            [
                'text'       => 'Использовать почту для действий, связанных с несрочным информационным обменом, обменом точными данными, назначением несрочных встреч, фиксацией договорённостей, постановкой несрочных задач.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 1.2,
                ]
            ]
        );

        $this->assertEquals(
            $results['3216'],
            [
                'text'       => 'Использовать звонок для срочных вопросов: несложных обсуждений, личного общения с одним человеком, вопросов и просьб к одному человеку, а также в тех случаях, где важно личное общение.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 1.2,
                ]
            ]
        );

        $this->assertEquals(
            $results['3218'],
            [
                'text'       => 'Использовать встречу для дискуссии с целью принятия решения, при общении, содержащем личную, эмоциональную, политическую составляющую, для срочной постановки задачи, требующей разъяснений.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 1.2,
                ]
            ]
        );

        $this->assertEquals(
            $results['3311'],
            [
                'text'       => 'Работь с почтой сессионно (не более трех сессий в день). Не оставлять почту открытой на протяжении всего рабочего дня.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 1.8,
                ]
            ]
        );

        $this->assertEquals(
            $results['3312'],
            [
                'text'       => 'Настроить технические характеристики почты так, чтобы она не отвлекала от выполнения задач (нет звука, нет всплывающих сообщений о приходе нового письма).',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 0.6,
                ]
            ]
        );

        $this->assertEquals(
            $results['3313'],
            [
                'text'       => 'В рамках каждой сессии работы с почтой разбирать все пришедшие на данный момент письма, не оставляя необработанных писем.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 1.2,
                ]
            ]
        );

        $this->assertEquals(
            $results['3322'],
            [
                'text'       => 'Из прочитанного письма корректно распознавать задачи, требующие больше 2 минут на выполнение и тут же вносить их в план.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 1.8,
                ]
            ]
        );

        $this->assertEquals(
            $results['3323'],
            [
                'text'       => 'Из прочитанного письма корректно распознавать задачи, требующие менее 2 минут на выполнение. Выполнять такие задачи сразу после прочтения письма (например, краткое ответное письмо, звонок или пересылка информации).',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 1.8,
                ]
            ]
        );

        $this->assertEquals(
            $results['3324'],
            [
                'text'       => 'Научиться отличать письма, содержащие информацию (от Вас никакого действия не требуется), от писем, содержащих задачу (Ваше действие требуется).',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => -3.2,
                    'right' => -1000,
                ]
            ]
        );

        $this->assertEquals(
            $results['3326'],
            [
                'text'       => 'Не писать ненужные письма, т.е. не писать письма, которые никак не связаны с выполнением задач (Ваших, подчиненных или коллег), а приводят только к созданию информационного шума.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 1.8,
                ]
            ]
        );

        $this->assertEquals(
            $results['3332'],
            [
                'text'       => 'Корректно пользоваться полями "Кому" и  "Копия".',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 0.6,
                ]
            ]
        );

        $this->assertEquals(
            $results['3333'],
            [
                'text'       => 'Корректно пользоваться кнопкой "Ответить всем".',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 0.6,
                ]
            ]
        );

        $this->assertEquals(
            $results['4121'],
            [
                'text'       => 'Делегировать задачи, которые могут быть делегированы, исходя из информации о задаче.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 1.8,
                ]
            ]
        );

        $this->assertEquals(
            $results['4122'],
            [
                'text'       => 'Самостоятельно выполнять задачи, которые нельзя делегировать по их содержанию (статусные, контроль и мотивация, задачи, для которых только Вы обладаете уникальными компетенциями).',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 1.8,
                ]
            ]
        );

        $this->assertEquals(
            $results['4123'],
            [
                'text'       => 'Получить знания и научиться распознавать задачи, которые категорически нельзя делегировать.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => -5.6,
                    'right' => -1000,
                ]
            ]
        );

        $this->assertEquals(
            $results['4124'],
            [
                'text'       => 'Не делегировать двухминутные задачи, делегирование которых займет больше времени, чем выполнение.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 0.6,
                ]
            ]
        );

        $this->assertEquals(
            $results['4125'],
            [
                'text'       => 'В общем случае контролировать делегированную задачу по результату.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 1.8,
                ]
            ]
        );

        $this->assertEquals(
            $results['4126'],
            [
                'text'       => 'Научиться никогда не принимать решения о смене исполнителя задачи до появления каких-либо явных признаков провала ее выполнения.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => -5.6,
                    'right' => -1000,
                ]
            ]
        );

        $this->assertEquals(
            $results['4127'],
            [
                'text'       => 'Давать сотрудникам достачно информации для выполнения делегированной задачи.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 1.2,
                ]
            ]
        );

        $this->assertEquals(
            $results['4141'],
            [
                'text'       => 'Квалифицированного и мотивированного сотрудника контролировать по результату.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 1.8,
                ]
            ]
        );

        $this->assertEquals(
            $results['4143'],
            [
                'text'       => 'Неопытного и немотивированного сотрудника контролировать по ходу выполнения задачи (осуществлять промежуточный контроль).',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 1.8,
                ]
            ]
        );

        $this->assertEquals(
            $results['4144'],
            [
                'text'       => 'Не делегировать задачи сотруднику, который и так уже полностью заружен не менее приоритетными задачами. Никогда не использовать многократную смену приоритетов за короткий промежуток времени.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => -5.08,
                    'right' => -1000,
                ]
            ]
        );

        $this->assertEquals(
            $results['4145'],
            [
                'text'       => 'Научиться корректно интерпретировать уровень квалификации сотрудника. Не делегировать задачу сотруднику, который имеет недостаточный опыт или уровень мотивации для выполнения задачи.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => -2.52,
                    'right' => -1000,
                ]
            ]
        );

        $this->assertEquals(
            $results['4151'],
            [
                'text'       => 'Научиться давать обратную связь сотрудникам в тех случаях, где она крайне необходима.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => -1.4,
                    'right' => -1000,
                ]
            ]
        );

        $this->assertEquals(
            $results['4152'],
            [
                'text'       => 'Избегать оценочной обратной связи, которая не дает сотруднику никаких ориентиров, что именно и  как именно необходимо улучшить в его работе.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => -1.4,
                    'right' => -1000,
                ]
            ]
        );

        $this->assertEquals(
            $results['4153'],
            [
                'text'       => 'Давать конструктивную обратную связь, нацеленную на изменение поведения сотрудника.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 1.2,
                ]
            ]
        );

        $this->assertEquals(
            $results['214a1'],
            [
                'text'       => 'Приобреcти навык планирования активности на день перед началом рабочего дня. Рационально заполнять задачами рабочее время, планируя не менее 60% и не более 80% времени.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 1.5,
                ]
            ]
        );

        $this->assertEquals(
            $results['214a3'],
            [
                'text'       => 'Приобреcти навык комплексного (связанного) планирования рабочей недели. Освоить скользящее планирование на неделю, не оставляя неразобранных задач.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 0.6,
                ]
            ]
        );

        $this->assertEquals(
            $results['214a4'],
            [
                'text'       => 'В конце рабочего дня подводить итоги по задачам. Сформировать план на завтра из несделанных сегодня и новых задач.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 0.75,
                ]
            ]
        );

        $this->assertEquals(
            $results['214a5'],
            [
                'text'       => 'В конце рабочего дня подводить итоги по задачам. Актуализировать план на неделю с учетом несделанных сегодня и появившихся новых задач.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 0.45,
                ]
            ]
        );

        $this->assertEquals(
            $results['214a8'],
            [
                'text'       => 'Приобрести знания и опыт использования инструмента планирования.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => -1.6,
                    'right' => -4,
                ]
            ]
        );

        $this->assertEquals(
            $results['214b0'],
            [
                'text'       => 'Идентифицировать и планировать в первую очередь самые важные и срочные задачи (категория 0).',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 2.7,
                ]
            ]
        );

        $this->assertEquals(
            $results['214b1'],
            [
                'text'       => 'Идентифицировать и планировать выполнение задачи категории 1 ранее задач категории 2-5.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 2.7,
                ]
            ]
        );

        $this->assertEquals(
            $results['214b2'],
            [
                'text'       => 'Идентифицировать и планировать выполнение задачи категории 2 ранее задач категории 3-5.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 1.2,
                ]
            ]
        );

        $this->assertEquals(
            $results['214b3'],
            [
                'text'       => 'Идентифицировать и планировать выполнение задачи категории 3  ранее задач категории 4-5.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 0.75,
                ]
            ]
        );

        $this->assertEquals(
            $results['214b5'],
            [
                'text'       => 'Приобрести базовые знания и опыт использования приритетов задач при планировании, в частности, не планировать задачи категорий 4-5 ранее задач категории 0.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => -12,
                    'right' => -1000,
                ]
            ]
        );

        $this->assertEquals(
            $results['214b6'],
            [
                'text'       => 'Приобрести базовые знания и опыт использования приритетов задач при планировании, в частности, не планировать задачи категорий 4-5 ранее задач категории 1.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => -8,
                    'right' => -1000,
                ]
            ]
        );

        $this->assertEquals(
            $results['214b8'],
            [
                'text'       => 'Приобрести базовые знания и опыт использования приритетов задач при планировании, в частности, не планировать задачи категорий 4-5 ранее задач категории 2.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => -4,
                    'right' => -1000,
                ]
            ]
        );

        $this->assertEquals(
            $results['214b9'],
            [
                'text'       => 'Идентифицировать и планировать на нужное время важные и срочные задачи (категория 1 и 2) с фиксированным сроком выполнения.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 1.65,
                ]
            ]
        );

        $this->assertEquals(
            $results['214d0'],
            [
                'text'       => 'Распознавать и приступать немедленно к выполнению задач категории 0.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 5.4,
                ]
            ]
        );

        $this->assertEquals(
            $results['214d1'],
            [
                'text'       => 'Распознавать и приступать к выполнению задачи категории 1 ранее задач категорий 2-5.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 5.4,
                ]
            ]
        );

        $this->assertEquals(
            $results['214d2'],
            [
                'text'       => 'Распознавать и приступать к выполнению задачи категории 2 ранее задач категорий 3-5.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 2.4,
                ]
            ]
        );

        $this->assertEquals(
            $results['214d3'],
            [
                'text'       => 'Распознавать и приступать к выполнению задачи категории 3 ранее задач категорий 4-5.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 0.9,
                ]
            ]
        );

        $this->assertEquals(
            $results['214d4'],
            [
                'text'       => 'Распознавать и приступать к выполнению задачи категории 4 ранее задач категорий 5.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 0.6,
                ]
            ]
        );

        $this->assertEquals(
            $results['214d5'],
            [
                'text'       => 'Научиться отличать задачи самой высокой  категории (категории 0) от неприоритетных (категории 4-5).',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => -12,
                    'right' => -1000,
                ]
            ]
        );

        $this->assertEquals(
            $results['214d6'],
            [
                'text'       => 'Научиться отличать задачи самой высокой  категории (категории 1) от неприоритетных (категории 4-5).',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => -8,
                    'right' => -1000,
                ]
            ]
        );

        $this->assertEquals(
            $results['214d8'],
            [
                'text'       => 'Научиться отличать задачи высокой  категории (категории 2) от неприоритетных (категории 4-5).',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => -4,
                    'right' => -1000,
                ]
            ]
        );

        $this->assertEquals(
            $results['214g0'],
            [
                'text'       => 'Сфокусированно работать над приоритетной задачей (категория 0) до ее полного выполнения, не отвлекаясь на информационный шум и задачи более низких категорий (категории 1-5).',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => -14.4,
                    'right' => -1000,
                ]
            ]
        );

        $this->assertEquals(
            $results['214g1'],
            [
                'text'       => 'Сфокусированно работать над приоритетной задачей (категория 1) до ее полного выполнения, не отвлекаясь на информационный шум и задачи более низких категорий (категории 2-5).',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => -9.6,
                    'right' => -1000,
                ]
            ]
        );

        $this->assertEquals(
            $results['341a8'],
            [
                'text'       => 'Настроить технические характеристики телефонов так, чтобы они не отвлекали от выполнения задач (тихий звук, определитель номера, подписанные адресаты).',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 0.6,
                ]
            ]
        );

        $this->assertEquals(
            $results['341b1'],
            [
                'text'       => 'В начале разговора всегда корректно выснять цель звонка.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 0.6,
                ]
            ]
        );

        $this->assertEquals(
            $results['341b5'],
            [
                'text'       => 'При выполнении задач категорий 0-3 всегда игнорировать входящие звонки от лиц, которые никогда не могут быть источником задач категорий 0-3.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 0.9,
                ]
            ]
        );

        $this->assertEquals(
            $results['341b7'],
            [
                'text'       => 'Всегда принимать звонки от лиц, которые являются потенциальным источником задач категорий 0-3.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 0.9,
                ]
            ]
        );

        $this->assertEquals(
            $results['351a1'],
            [
                'text'       => 'Планировать встречи заранее. В общем случае не соглашаться на незапланированные встречи.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 0.3,
                ]
            ]
        );

        $this->assertEquals(
            $results['351a2'],
            [
                'text'       => 'Никогда не соглашаться на незапланированные встречи с лицами, которые не являются потенциальным источником задач категорий 0-1',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => -5,
                    'right' => -1000,
                ]
            ]
        );

        $this->assertEquals(
            $results['351b1'],
            [
                'text'       => 'В начале разговора всегда корректно выснять цель визита.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 0.3,
                ]
            ]
        );

        $this->assertEquals(
            $results['351b3'],
            [
                'text'       => 'При выполнении задач категорий 0-3 всегда игнорировать посетителей, которые  никогда не могут быть источником задач категории 0-3.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 1.2,
                ]
            ]
        );

        $this->assertEquals(
            $results['351b2'],
            [
                'text'       => 'Всегда принимать посетитетелей, которые являются потенциальным источником задач категорий 0-3.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 1.2,
                ]
            ]
        );

        $this->assertEquals(
            $results['351c1'],
            [
                'text'       => 'Выполнять двухминутную задачу, поступившую на встрече, сразу после завершения встречи.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 0.3,
                ]
            ]
        );

        $this->assertEquals(
            $results['351c2'],
            [
                'text'       => 'По результатам встречи вычленять задачи, требующие больше 2 минут на выполнение, и вносить их в план.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 0.3,
                ]
            ]
        );

        $this->assertEquals(
            $results['351c3'],
            [
                'text'       => 'Фиксировать результаты встречи: резюмировать итоги встречи и следующие шаги.',
                'short_text' => '(плохо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => 0.6,
                ]
            ]
        );
    }

    /**
     * Верхняя гарница первого кармана
     */
    public function testTextForInfoGraphic_2() {

        $scenarioFull = Scenario::model()->findByAttributes(['slug' => Scenario::TYPE_FULL]);

        $simulation = new Simulation();
        $simulation->assessment_version === Simulation::ASSESSMENT_VERSION_2;
        $simulation->game_type = $scenarioFull;

        $simulation->behaviours_cache = serialize(
            [
                '3214'  => '1.1',
                '3216'  => '1.1',
                '3218'  => '1.1',
                '3311'  => '1.7',
                '3312'  => '0.5',
                '3313'  => '1.1',
                '3322'  => '1.7',
                '3323'  => '1.7',
                '3324'  => '-3.2',
                '3326'  => '1.7',
                '3332'  => '0.5',
                '3333'  => '0.5',
                '4121'  => '1.7',
                '4122'  => '1.7',
                '4123'  => '-5.6',
                '4124'  => '0.5',
                '4125'  => '1.7',
                '4126'  => '-5.6',
                '4127'  => '1.1',
                '4141'  => '1.7',
                '4143'  => '1.7',
                '4144'  => '-5.08',
                '4145'  => '-2.52',
                '4151'  => '-1.4',
                '4152'  => '-1.4',
                '4153'  => '1.1',
                '214a1' => '1.4',
                '214a3' => '0.5',
                '214a4' => '0.74',
                '214a5' => '0.44',
                '214a8' => '-1.6',
                '214b0' => '2.6',
                '214b1' => '2.6',
                '214b2' => '1.1',
                '214b3' => '0.74',
                '214b5' => '-12',
                '214b6' => '-8',
                '214b8' => '-4',
                '214b9' => '1.64',
                '214d0' => '5.3',
                '214d1' => '5.3',
                '214d2' => '2.3',
                '214d3' => '0.8',
                '214d4' => '0.5',
                '214d5' => '-12',
                '214d6' => '-8',
                '214d8' => '-4',
                '214g0' => '-14.4',
                '214g1' => '-9.6',
                '341a8' => '0.5',
                '341b1' => '0.5',
                '341b5' => '0.8',
                '341b7' => '0.8',
                '351a1' => '0.2',
                '351a2' => '-5',
                '351b1' => '0.2',
                '351b3' => '1.1',
                '351b2' => '1.1',
                '351c1' => '0.2',
                '351c2' => '0.2',
                '351c3' => '0.5',
            ]
        );

        $results = SimulationResultTextService::generate($simulation, 'recommendation');

//        foreach (unserialize($simulation->behaviours_cache) as $key => $value) {
//            $this->getArray($results, $key);
//        }
//        die();

       $this->assertEquals(
           $results['3214'],
           [
               'text'       => 'Использовать почту для действий, связанных с несрочным информационным обменом, обменом точными данными, назначением несрочных встреч, фиксацией договорённостей, постановкой несрочных задач.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 1.2,
               ]
           ]
       );

       $this->assertEquals(
           $results['3216'],
           [
               'text'       => 'Использовать звонок для срочных вопросов: несложных обсуждений, личного общения с одним человеком, вопросов и просьб к одному человеку, а также в тех случаях, где важно личное общение.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 1.2,
               ]
           ]
       );

       $this->assertEquals(
           $results['3218'],
           [
               'text'       => 'Использовать встречу для дискуссии с целью принятия решения, при общении, содержащем личную, эмоциональную, политическую составляющую, для срочной постановки задачи, требующей разъяснений.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 1.2,
               ]
           ]
       );

       $this->assertEquals(
           $results['3311'],
           [
               'text'       => 'Работь с почтой сессионно (не более трех сессий в день). Не оставлять почту открытой на протяжении всего рабочего дня.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 1.8,
               ]
           ]
       );

       $this->assertEquals(
           $results['3312'],
           [
               'text'       => 'Настроить технические характеристики почты так, чтобы она не отвлекала от выполнения задач (нет звука, нет всплывающих сообщений о приходе нового письма).',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 0.6,
               ]
           ]
       );

       $this->assertEquals(
           $results['3313'],
           [
               'text'       => 'В рамках каждой сессии работы с почтой разбирать все пришедшие на данный момент письма, не оставляя необработанных писем.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 1.2,
               ]
           ]
       );

       $this->assertEquals(
           $results['3322'],
           [
               'text'       => 'Из прочитанного письма корректно распознавать задачи, требующие больше 2 минут на выполнение и тут же вносить их в план.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 1.8,
               ]
           ]
       );

       $this->assertEquals(
           $results['3323'],
           [
               'text'       => 'Из прочитанного письма корректно распознавать задачи, требующие менее 2 минут на выполнение. Выполнять такие задачи сразу после прочтения письма (например, краткое ответное письмо, звонок или пересылка информации).',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 1.8,
               ]
           ]
       );

       $this->assertEquals(
           $results['3324'],
           [
               'text'       => 'Научиться отличать письма, содержащие информацию (от Вас никакого действия не требуется), от писем, содержащих задачу (Ваше действие требуется).',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => -3.2,
                   'right' => -1000,
               ]
           ]
       );

       $this->assertEquals(
           $results['3326'],
           [
               'text'       => 'Не писать ненужные письма, т.е. не писать письма, которые никак не связаны с выполнением задач (Ваших, подчиненных или коллег), а приводят только к созданию информационного шума.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 1.8,
               ]
           ]
       );

       $this->assertEquals(
           $results['3332'],
           [
               'text'       => 'Корректно пользоваться полями "Кому" и  "Копия".',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 0.6,
               ]
           ]
       );

       $this->assertEquals(
           $results['3333'],
           [
               'text'       => 'Корректно пользоваться кнопкой "Ответить всем".',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 0.6,
               ]
           ]
       );

       $this->assertEquals(
           $results['4121'],
           [
               'text'       => 'Делегировать задачи, которые могут быть делегированы, исходя из информации о задаче.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 1.8,
               ]
           ]
       );

       $this->assertEquals(
           $results['4122'],
           [
               'text'       => 'Самостоятельно выполнять задачи, которые нельзя делегировать по их содержанию (статусные, контроль и мотивация, задачи, для которых только Вы обладаете уникальными компетенциями).',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 1.8,
               ]
           ]
       );

       $this->assertEquals(
           $results['4123'],
           [
               'text'       => 'Получить знания и научиться распознавать задачи, которые категорически нельзя делегировать.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => -5.6,
                   'right' => -1000,
               ]
           ]
       );

       $this->assertEquals(
           $results['4124'],
           [
               'text'       => 'Не делегировать двухминутные задачи, делегирование которых займет больше времени, чем выполнение.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 0.6,
               ]
           ]
       );

       $this->assertEquals(
           $results['4125'],
           [
               'text'       => 'В общем случае контролировать делегированную задачу по результату.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 1.8,
               ]
           ]
       );

       $this->assertEquals(
           $results['4126'],
           [
               'text'       => 'Научиться никогда не принимать решения о смене исполнителя задачи до появления каких-либо явных признаков провала ее выполнения.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => -5.6,
                   'right' => -1000,
               ]
           ]
       );

       $this->assertEquals(
           $results['4127'],
           [
               'text'       => 'Давать сотрудникам достачно информации для выполнения делегированной задачи.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 1.2,
               ]
           ]
       );

       $this->assertEquals(
           $results['4141'],
           [
               'text'       => 'Квалифицированного и мотивированного сотрудника контролировать по результату.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 1.8,
               ]
           ]
       );

       $this->assertEquals(
           $results['4143'],
           [
               'text'       => 'Неопытного и немотивированного сотрудника контролировать по ходу выполнения задачи (осуществлять промежуточный контроль).',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 1.8,
               ]
           ]
       );

       $this->assertEquals(
           $results['4144'],
           [
               'text'       => 'Не делегировать задачи сотруднику, который и так уже полностью заружен не менее приоритетными задачами. Никогда не использовать многократную смену приоритетов за короткий промежуток времени.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => -5.08,
                   'right' => -1000,
               ]
           ]
       );

       $this->assertEquals(
           $results['4145'],
           [
               'text'       => 'Научиться корректно интерпретировать уровень квалификации сотрудника. Не делегировать задачу сотруднику, который имеет недостаточный опыт или уровень мотивации для выполнения задачи.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => -2.52,
                   'right' => -1000,
               ]
           ]
       );

       $this->assertEquals(
           $results['4151'],
           [
               'text'       => 'Научиться давать обратную связь сотрудникам в тех случаях, где она крайне необходима.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => -1.4,
                   'right' => -1000,
               ]
           ]
       );

       $this->assertEquals(
           $results['4152'],
           [
               'text'       => 'Избегать оценочной обратной связи, которая не дает сотруднику никаких ориентиров, что именно и  как именно необходимо улучшить в его работе.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => -1.4,
                   'right' => -1000,
               ]
           ]
       );

       $this->assertEquals(
           $results['4153'],
           [
               'text'       => 'Давать конструктивную обратную связь, нацеленную на изменение поведения сотрудника.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 1.2,
               ]
           ]
       );

       $this->assertEquals(
           $results['214a1'],
           [
               'text'       => 'Приобреcти навык планирования активности на день перед началом рабочего дня. Рационально заполнять задачами рабочее время, планируя не менее 60% и не более 80% времени.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 1.5,
               ]
           ]
       );

       $this->assertEquals(
           $results['214a3'],
           [
               'text'       => 'Приобреcти навык комплексного (связанного) планирования рабочей недели. Освоить скользящее планирование на неделю, не оставляя неразобранных задач.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 0.6,
               ]
           ]
       );

       $this->assertEquals(
           $results['214a4'],
           [
               'text'       => 'В конце рабочего дня подводить итоги по задачам. Сформировать план на завтра из несделанных сегодня и новых задач.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 0.75,
               ]
           ]
       );

       $this->assertEquals(
           $results['214a5'],
           [
               'text'       => 'В конце рабочего дня подводить итоги по задачам. Актуализировать план на неделю с учетом несделанных сегодня и появившихся новых задач.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 0.45,
               ]
           ]
       );

       $this->assertEquals(
           $results['214a8'],
           [
               'text'       => 'Приобрести знания и опыт использования инструмента планирования.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => -1.6,
                   'right' => -4,
               ]
           ]
       );

       $this->assertEquals(
           $results['214b0'],
           [
               'text'       => 'Идентифицировать и планировать в первую очередь самые важные и срочные задачи (категория 0).',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 2.7,
               ]
           ]
       );

       $this->assertEquals(
           $results['214b1'],
           [
               'text'       => 'Идентифицировать и планировать выполнение задачи категории 1 ранее задач категории 2-5.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 2.7,
               ]
           ]
       );

       $this->assertEquals(
           $results['214b2'],
           [
               'text'       => 'Идентифицировать и планировать выполнение задачи категории 2 ранее задач категории 3-5.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 1.2,
               ]
           ]
       );

       $this->assertEquals(
           $results['214b3'],
           [
               'text'       => 'Идентифицировать и планировать выполнение задачи категории 3  ранее задач категории 4-5.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 0.75,
               ]
           ]
       );

       $this->assertEquals(
           $results['214b5'],
           [
               'text'       => 'Приобрести базовые знания и опыт использования приритетов задач при планировании, в частности, не планировать задачи категорий 4-5 ранее задач категории 0.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => -12,
                   'right' => -1000,
               ]
           ]
       );

       $this->assertEquals(
           $results['214b6'],
           [
               'text'       => 'Приобрести базовые знания и опыт использования приритетов задач при планировании, в частности, не планировать задачи категорий 4-5 ранее задач категории 1.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => -8,
                   'right' => -1000,
               ]
           ]
       );

       $this->assertEquals(
           $results['214b8'],
           [
               'text'       => 'Приобрести базовые знания и опыт использования приритетов задач при планировании, в частности, не планировать задачи категорий 4-5 ранее задач категории 2.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => -4,
                   'right' => -1000,
               ]
           ]
       );

       $this->assertEquals(
           $results['214b9'],
           [
               'text'       => 'Идентифицировать и планировать на нужное время важные и срочные задачи (категория 1 и 2) с фиксированным сроком выполнения.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 1.65,
               ]
           ]
       );

       $this->assertEquals(
           $results['214d0'],
           [
               'text'       => 'Распознавать и приступать немедленно к выполнению задач категории 0.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 5.4,
               ]
           ]
       );

       $this->assertEquals(
           $results['214d1'],
           [
               'text'       => 'Распознавать и приступать к выполнению задачи категории 1 ранее задач категорий 2-5.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 5.4,
               ]
           ]
       );

       $this->assertEquals(
           $results['214d2'],
           [
               'text'       => 'Распознавать и приступать к выполнению задачи категории 2 ранее задач категорий 3-5.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 2.4,
               ]
           ]
       );

       $this->assertEquals(
           $results['214d3'],
           [
               'text'       => 'Распознавать и приступать к выполнению задачи категории 3 ранее задач категорий 4-5.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 0.9,
               ]
           ]
       );

       $this->assertEquals(
           $results['214d4'],
           [
               'text'       => 'Распознавать и приступать к выполнению задачи категории 4 ранее задач категорий 5.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 0.6,
               ]
           ]
       );

       $this->assertEquals(
           $results['214d5'],
           [
               'text'       => 'Научиться отличать задачи самой высокой  категории (категории 0) от неприоритетных (категории 4-5).',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => -12,
                   'right' => -1000,
               ]
           ]
       );

       $this->assertEquals(
           $results['214d6'],
           [
               'text'       => 'Научиться отличать задачи самой высокой  категории (категории 1) от неприоритетных (категории 4-5).',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => -8,
                   'right' => -1000,
               ]
           ]
       );

       $this->assertEquals(
           $results['214d8'],
           [
               'text'       => 'Научиться отличать задачи высокой  категории (категории 2) от неприоритетных (категории 4-5).',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => -4,
                   'right' => -1000,
               ]
           ]
       );

       $this->assertEquals(
           $results['214g0'],
           [
               'text'       => 'Сфокусированно работать над приоритетной задачей (категория 0) до ее полного выполнения, не отвлекаясь на информационный шум и задачи более низких категорий (категории 1-5).',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => -14.4,
                   'right' => -1000,
               ]
           ]
       );

       $this->assertEquals(
           $results['214g1'],
           [
               'text'       => 'Сфокусированно работать над приоритетной задачей (категория 1) до ее полного выполнения, не отвлекаясь на информационный шум и задачи более низких категорий (категории 2-5).',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => -9.6,
                   'right' => -1000,
               ]
           ]
       );

       $this->assertEquals(
           $results['341a8'],
           [
               'text'       => 'Настроить технические характеристики телефонов так, чтобы они не отвлекали от выполнения задач (тихий звук, определитель номера, подписанные адресаты).',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 0.6,
               ]
           ]
       );

       $this->assertEquals(
           $results['341b1'],
           [
               'text'       => 'В начале разговора всегда корректно выснять цель звонка.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 0.6,
               ]
           ]
       );

       $this->assertEquals(
           $results['341b5'],
           [
               'text'       => 'При выполнении задач категорий 0-3 всегда игнорировать входящие звонки от лиц, которые никогда не могут быть источником задач категорий 0-3.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 0.9,
               ]
           ]
       );

       $this->assertEquals(
           $results['341b7'],
           [
               'text'       => 'Всегда принимать звонки от лиц, которые являются потенциальным источником задач категорий 0-3.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 0.9,
               ]
           ]
       );

       $this->assertEquals(
           $results['351a1'],
           [
               'text'       => 'Планировать встречи заранее. В общем случае не соглашаться на незапланированные встречи.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 0.3,
               ]
           ]
       );

       $this->assertEquals(
           $results['351a2'],
           [
               'text'       => 'Никогда не соглашаться на незапланированные встречи с лицами, которые не являются потенциальным источником задач категорий 0-1',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => -5,
                   'right' => -1000,
               ]
           ]
       );

       $this->assertEquals(
           $results['351b1'],
           [
               'text'       => 'В начале разговора всегда корректно выснять цель визита.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 0.3,
               ]
           ]
       );

       $this->assertEquals(
           $results['351b3'],
           [
               'text'       => 'При выполнении задач категорий 0-3 всегда игнорировать посетителей, которые  никогда не могут быть источником задач категории 0-3.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 1.2,
               ]
           ]
       );

       $this->assertEquals(
           $results['351b2'],
           [
               'text'       => 'Всегда принимать посетитетелей, которые являются потенциальным источником задач категорий 0-3.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 1.2,
               ]
           ]
       );

       $this->assertEquals(
           $results['351c1'],
           [
               'text'       => 'Выполнять двухминутную задачу, поступившую на встрече, сразу после завершения встречи.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 0.3,
               ]
           ]
       );

       $this->assertEquals(
           $results['351c2'],
           [
               'text'       => 'По результатам встречи вычленять задачи, требующие больше 2 минут на выполнение, и вносить их в план.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 0.3,
               ]
           ]
       );

       $this->assertEquals(
           $results['351c3'],
           [
               'text'       => 'Фиксировать результаты встречи: резюмировать итоги встречи и следующие шаги.',
               'short_text' => '(плохо)',
               'pocket'     => [
                   'left'  => 0,
                   'right' => 0.6,
               ]
           ]
       );
    }

    /**
     * Нижняя гарница второго кармана - "хорошо"
     */
    public function testTextForInfoGraphic_3() {

        $scenarioFull = Scenario::model()->findByAttributes(['slug' => Scenario::TYPE_FULL]);

        $simulation = new Simulation();
        $simulation->assessment_version === Simulation::ASSESSMENT_VERSION_2;
        $simulation->game_type = $scenarioFull;

        $simulation->behaviours_cache = serialize(
            [
                '3214'  => '1.2',
                '3216'  => '1.2',
                '3218'  => '1.2',
                '3311'  => '1.8',
                '3312'  => '0.6',
                '3313'  => '1.2',
                '3322'  => '1.8',
                '3323'  => '1.8',
                '3324'  => '-3.1',
                '3326'  => '1.8',
                '3332'  => '0.6',
                '3333'  => '0.6',
                '4121'  => '1.8',
                '4122'  => '1.8',
                '4123'  => '-5.5',
                '4124'  => '0.6',
                '4125'  => '1.8',
                '4126'  => '-5.5',
                '4127'  => '1.2',
                '4141'  => '1.8',
                '4143'  => '1.8',
                '4144'  => '-5.07',
                '4145'  => '-2.51',
                '4151'  => '-1.3',
                '4152'  => '-1.3',
                '4153'  => '1.2',
                '214a1' => '1.5',
                '214a3' => '0.6',
                '214a4' => '0.75',
                '214a5' => '0.45',
                '214a8' => '-1.5',
                '214b0' => '2.7',
                '214b1' => '2.7',
                '214b2' => '1.2',
                '214b3' => '0.75',
                '214b5' => '-11',
                '214b6' => '-7',
                '214b8' => '-3',
                '214b9' => '1.65',
                '214d0' => '5.4',
                '214d1' => '5.4',
                '214d2' => '2.4',
                '214d3' => '0.9',
                '214d4' => '0.6',
                '214d5' => '-11',
                '214d6' => '-7',
                '214d8' => '-3',
                '214g0' => '-14.3',
                '214g1' => '-9.5',
                '341a8' => '0.6',
                '341b1' => '0.6',
                '341b5' => '0.9',
                '341b7' => '0.9',
                '351a1' => '0.3',
                '351a2' => '-4',
                '351b1' => '0.3',
                '351b3' => '1.2',
                '351b2' => '1.2',
                '351c1' => '0.3',
                '351c2' => '0.3',
                '351c3' => '0.6',
            ]
        );

        $results = SimulationResultTextService::generate($simulation, 'recommendation');

//        foreach (unserialize($simulation->behaviours_cache) as $key => $value) {
//            $this->getArray($results, $key);
//        }
//        die();

        $this->assertEquals(
            $results['3214'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.2,
                    'right' => 2,
                ]
            ]
        );

        $this->assertEquals(
            $results['3216'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.2,
                    'right' => 2,
                ]
            ]
        );

        $this->assertEquals(
            $results['3218'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.2,
                    'right' => 2,
                ]
            ]
        );

        $this->assertEquals(
            $results['3311'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.8,
                    'right' => 3,
                ]
            ]
        );

        $this->assertEquals(
            $results['3312'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.6,
                    'right' => 1,
                ]
            ]
        );

        $this->assertEquals(
            $results['3313'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.2,
                    'right' => 2,
                ]
            ]
        );

        $this->assertEquals(
            $results['3322'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.8,
                    'right' => 3,
                ]
            ]
        );

        $this->assertEquals(
            $results['3323'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.8,
                    'right' => 3,
                ]
            ]
        );

        $this->assertEquals(
            $results['3324'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => -3.2,
                ]
            ]
        );

        $this->assertEquals(
            $results['3326'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.8,
                    'right' => 3,
                ]
            ]
        );

        $this->assertEquals(
            $results['3332'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.6,
                    'right' => 1,
                ]
            ]
        );

        $this->assertEquals(
            $results['3333'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.6,
                    'right' => 1,
                ]
            ]
        );

        $this->assertEquals(
            $results['4121'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.8,
                    'right' => 3,
                ]
            ]
        );

        $this->assertEquals(
            $results['4122'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.8,
                    'right' => 3,
                ]
            ]
        );

        $this->assertEquals(
            $results['4123'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => -5.6,
                ]
            ]
        );

        $this->assertEquals(
            $results['4124'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.6,
                    'right' => 1,
                ]
            ]
        );

        $this->assertEquals(
            $results['4125'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.8,
                    'right' => 3,
                ]
            ]
        );

        $this->assertEquals(
            $results['4126'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => -5.6,
                ]
            ]
        );

        $this->assertEquals(
            $results['4127'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.2,
                    'right' => 2,
                ]
            ]
        );

        $this->assertEquals(
            $results['4141'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.8,
                    'right' => 3,
                ]
            ]
        );

        $this->assertEquals(
            $results['4143'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.8,
                    'right' => 3,
                ]
            ]
        );

        $this->assertEquals(
            $results['4144'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => -5.08,
                ]
            ]
        );

        $this->assertEquals(
            $results['4145'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => -2.52,
                ]
            ]
        );

        $this->assertEquals(
            $results['4151'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => -1.4,
                ]
            ]
        );

        $this->assertEquals(
            $results['4152'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => -1.4,
                ]
            ]
        );

        $this->assertEquals(
            $results['4153'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.2,
                    'right' => 2,
                ]
            ]
        );

        $this->assertEquals(
            $results['214a1'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.5,
                    'right' => 2.5,
                ]
            ]
        );

        $this->assertEquals(
            $results['214a3'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.6,
                    'right' => 1,
                ]
            ]
        );

        $this->assertEquals(
            $results['214a4'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.75,
                    'right' => 1.25,
                ]
            ]
        );

        $this->assertEquals(
            $results['214a5'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.45,
                    'right' => 0.75,
                ]
            ]
        );

        $this->assertEquals(
            $results['214a8'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => -1.6,
                ]
            ]
        );

        $this->assertEquals(
            $results['214b0'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 2.7,
                    'right' => 4.5,
                ]
            ]
        );

        $this->assertEquals(
            $results['214b1'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 2.7,
                    'right' => 4.5,
                ]
            ]
        );

        $this->assertEquals(
            $results['214b2'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.2,
                    'right' => 2,
                ]
            ]
        );

        $this->assertEquals(
            $results['214b3'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.75,
                    'right' => 1.25,
                ]
            ]
        );

        $this->assertEquals(
            $results['214b5'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => -12,
                ]
            ]
        );

        $this->assertEquals(
            $results['214b6'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => -8,
                ]
            ]
        );

        $this->assertEquals(
            $results['214b8'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => -4,
                ]
            ]
        );

        $this->assertEquals(
            $results['214b9'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.65,
                    'right' => 2.75,
                ]
            ]
        );

        $this->assertEquals(
            $results['214d0'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 5.4,
                    'right' => 9,
                ]
            ]
        );

        $this->assertEquals(
            $results['214d1'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 5.4,
                    'right' => 9,
                ]
            ]
        );

        $this->assertEquals(
            $results['214d2'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 2.4,
                    'right' => 4,
                ]
            ]
        );

        $this->assertEquals(
            $results['214d3'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.9,
                    'right' => 1.5,
                ]
            ]
        );

        $this->assertEquals(
            $results['214d4'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.6,
                    'right' => 1,
                ]
            ]
        );

        $this->assertEquals(
            $results['214d5'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => -12,
                ]
            ]
        );

        $this->assertEquals(
            $results['214d6'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => -8,
                ]
            ]
        );

        $this->assertEquals(
            $results['214d8'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => -4,
                ]
            ]
        );

        $this->assertEquals(
            $results['214g0'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => -14.4,
                ]
            ]
        );

        $this->assertEquals(
            $results['214g1'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => -9.6,
                ]
            ]
        );

        $this->assertEquals(
            $results['341a8'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.6,
                    'right' => 1,
                ]
            ]
        );

        $this->assertEquals(
            $results['341b1'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.6,
                    'right' => 1,
                ]
            ]
        );

        $this->assertEquals(
            $results['341b5'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.9,
                    'right' => 1.5,
                ]
            ]
        );

        $this->assertEquals(
            $results['341b7'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.9,
                    'right' => 1.5,
                ]
            ]
        );

        $this->assertEquals(
            $results['351a1'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.3,
                    'right' => 1000,
                ]
            ]
        );

        $this->assertEquals(
            $results['351a2'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => -5,
                ]
            ]
        );

        $this->assertEquals(
            $results['351b1'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.3,
                    'right' => 0.5,
                ]
            ]
        );

        $this->assertEquals(
            $results['351b3'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.2,
                    'right' => 2,
                ]
            ]
        );

        $this->assertEquals(
            $results['351b2'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.2,
                    'right' => 2,
                ]
            ]
        );

        $this->assertEquals(
            $results['351c1'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.3,
                    'right' => 0.5,
                ]
            ]
        );

        $this->assertEquals(
            $results['351c2'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.3,
                    'right' => 0.5,
                ]
            ]
        );

        $this->assertEquals(
            $results['351c3'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.6,
                    'right' => 1,
                ]
            ]
        );
    }

    /**
     * Верхняя гарница второго кармана - "хорошо"
     */
    public function testTextForInfoGraphic_4() {

        $scenarioFull = Scenario::model()->findByAttributes(['slug' => Scenario::TYPE_FULL]);

        $simulation = new Simulation();
        $simulation->assessment_version === Simulation::ASSESSMENT_VERSION_2;
        $simulation->game_type = $scenarioFull;

        $simulation->behaviours_cache = serialize(
            [
                '3214'  => '2',
                '3216'  => '2',
                '3218'  => '2',
                '3311'  => '3',
                '3312'  => '1',
                '3313'  => '2',
                '3322'  => '3',
                '3323'  => '3',
                '3324'  => '0',
                '3326'  => '3',
                '3332'  => '1',
                '3333'  => '1',
                '4121'  => '3',
                '4122'  => '3',
                '4123'  => '0',
                '4124'  => '1',
                '4125'  => '2',
                '4126'  => '0',
                '4127'  => '2',
                '4141'  => '3',
                '4143'  => '3',
                '4144'  => '0',
                '4145'  => '0',
                '4151'  => '0',
                '4152'  => '0',
                '4153'  => '2',
                '214a1' => '2.5',
                '214a3' => '1',
                '214a4' => '1,25',
                '214a5' => '0.75',
                '214a8' => '0',
                '214b0' => '4.5',
                '214b1' => '4.5',
                '214b2' => '2',
                '214b3' => '1.25',
                '214b5' => '0',
                '214b6' => '0',
                '214b8' => '0',
                '214b9' => '2.75',
                '214d0' => '9',
                '214d1' => '9',
                '214d2' => '4',
                '214d3' => '1.5',
                '214d4' => '1',
                '214d5' => '0',
                '214d6' => '0',
                '214d8' => '0',
                '214g0' => '0',
                '214g1' => '0',
                '341a8' => '1',
                '341b1' => '1',
                '341b5' => '1.5',
                '341b7' => '1.5',
                '351a1' => '1000',
                '351a2' => '0',
                '351b1' => '0.5',
                '351b3' => '2',
                '351b2' => '2',
                '351c1' => '0.5',
                '351c2' => '0.5',
                '351c3' => '1',
            ]
        );

        $results = SimulationResultTextService::generate($simulation, 'recommendation');

//        foreach (unserialize($simulation->behaviours_cache) as $key => $value) {
//            $this->getArray($results, $key);
//        }
//        die();

        $this->assertEquals(
            $results['3214'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.2,
                    'right' => 2,
                ]
            ]
        );

        $this->assertEquals(
            $results['3216'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.2,
                    'right' => 2,
                ]
            ]
        );

        $this->assertEquals(
            $results['3218'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.2,
                    'right' => 2,
                ]
            ]
        );

        $this->assertEquals(
            $results['3311'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.8,
                    'right' => 3,
                ]
            ]
        );

        $this->assertEquals(
            $results['3312'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.6,
                    'right' => 1,
                ]
            ]
        );

        $this->assertEquals(
            $results['3313'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.2,
                    'right' => 2,
                ]
            ]
        );

        $this->assertEquals(
            $results['3322'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.8,
                    'right' => 3,
                ]
            ]
        );

        $this->assertEquals(
            $results['3323'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.8,
                    'right' => 3,
                ]
            ]
        );

        $this->assertEquals(
            $results['3324'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => -3.2,
                ]
            ]
        );

        $this->assertEquals(
            $results['3326'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.8,
                    'right' => 3,
                ]
            ]
        );

        $this->assertEquals(
            $results['3332'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.6,
                    'right' => 1,
                ]
            ]
        );

        $this->assertEquals(
            $results['3333'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.6,
                    'right' => 1,
                ]
            ]
        );

        $this->assertEquals(
            $results['4121'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.8,
                    'right' => 3,
                ]
            ]
        );

        $this->assertEquals(
            $results['4122'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.8,
                    'right' => 3,
                ]
            ]
        );

        $this->assertEquals(
            $results['4123'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => -5.6,
                ]
            ]
        );

        $this->assertEquals(
            $results['4124'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.6,
                    'right' => 1,
                ]
            ]
        );

        $this->assertEquals(
            $results['4125'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.8,
                    'right' => 3,
                ]
            ]
        );

        $this->assertEquals(
            $results['4126'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => -5.6,
                ]
            ]
        );

        $this->assertEquals(
            $results['4127'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.2,
                    'right' => 2,
                ]
            ]
        );

        $this->assertEquals(
            $results['4141'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.8,
                    'right' => 3,
                ]
            ]
        );

        $this->assertEquals(
            $results['4143'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.8,
                    'right' => 3,
                ]
            ]
        );

        $this->assertEquals(
            $results['4144'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => -5.08,
                ]
            ]
        );

        $this->assertEquals(
            $results['4145'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => -2.52,
                ]
            ]
        );

        $this->assertEquals(
            $results['4151'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => -1.4,
                ]
            ]
        );

        $this->assertEquals(
            $results['4152'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => -1.4,
                ]
            ]
        );

        $this->assertEquals(
            $results['4153'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.2,
                    'right' => 2,
                ]
            ]
        );

        $this->assertEquals(
            $results['214a1'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.5,
                    'right' => 2.5,
                ]
            ]
        );

        $this->assertEquals(
            $results['214a3'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.6,
                    'right' => 1,
                ]
            ]
        );

        $this->assertEquals(
            $results['214a4'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.75,
                    'right' => 1.25,
                ]
            ]
        );

        $this->assertEquals(
            $results['214a5'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.45,
                    'right' => 0.75,
                ]
            ]
        );

        $this->assertEquals(
            $results['214a8'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => -1.6,
                ]
            ]
        );

        $this->assertEquals(
            $results['214b0'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 2.7,
                    'right' => 4.5,
                ]
            ]
        );

        $this->assertEquals(
            $results['214b1'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 2.7,
                    'right' => 4.5,
                ]
            ]
        );

        $this->assertEquals(
            $results['214b2'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.2,
                    'right' => 2,
                ]
            ]
        );

        $this->assertEquals(
            $results['214b3'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.75,
                    'right' => 1.25,
                ]
            ]
        );

        $this->assertEquals(
            $results['214b5'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => -12,
                ]
            ]
        );

        $this->assertEquals(
            $results['214b6'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => -8,
                ]
            ]
        );

        $this->assertEquals(
            $results['214b8'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => -4,
                ]
            ]
        );

        $this->assertEquals(
            $results['214b9'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.65,
                    'right' => 2.75,
                ]
            ]
        );

        $this->assertEquals(
            $results['214d0'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 5.4,
                    'right' => 9,
                ]
            ]
        );

        $this->assertEquals(
            $results['214d1'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 5.4,
                    'right' => 9,
                ]
            ]
        );

        $this->assertEquals(
            $results['214d2'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 2.4,
                    'right' => 4,
                ]
            ]
        );

        $this->assertEquals(
            $results['214d3'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.9,
                    'right' => 1.5,
                ]
            ]
        );

        $this->assertEquals(
            $results['214d4'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.6,
                    'right' => 1,
                ]
            ]
        );

        $this->assertEquals(
            $results['214d5'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => -12,
                ]
            ]
        );

        $this->assertEquals(
            $results['214d6'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => -8,
                ]
            ]
        );

        $this->assertEquals(
            $results['214d8'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => -4,
                ]
            ]
        );

        $this->assertEquals(
            $results['214g0'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => -14.4,
                ]
            ]
        );

        $this->assertEquals(
            $results['214g1'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => -9.6,
                ]
            ]
        );

        $this->assertEquals(
            $results['341a8'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.6,
                    'right' => 1,
                ]
            ]
        );

        $this->assertEquals(
            $results['341b1'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.6,
                    'right' => 1,
                ]
            ]
        );

        $this->assertEquals(
            $results['341b5'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.9,
                    'right' => 1.5,
                ]
            ]
        );

        $this->assertEquals(
            $results['341b7'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.9,
                    'right' => 1.5,
                ]
            ]
        );

        $this->assertEquals(
            $results['351a1'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.3,
                    'right' => 1000,
                ]
            ]
        );

        $this->assertEquals(
            $results['351a2'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0,
                    'right' => -5,
                ]
            ]
        );

        $this->assertEquals(
            $results['351b1'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.3,
                    'right' => 0.5,
                ]
            ]
        );

        $this->assertEquals(
            $results['351b3'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.2,
                    'right' => 2,
                ]
            ]
        );

        $this->assertEquals(
            $results['351b2'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 1.2,
                    'right' => 2,
                ]
            ]
        );

        $this->assertEquals(
            $results['351c1'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.3,
                    'right' => 0.5,
                ]
            ]
        );

        $this->assertEquals(
            $results['351c2'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.3,
                    'right' => 0.5,
                ]
            ]
        );

        $this->assertEquals(
            $results['351c3'],
            [
                'text'       => '',
                'short_text' => '(хорошо)',
                'pocket'     => [
                    'left'  => 0.6,
                    'right' => 1,
                ]
            ]
        );
    }

    /**
     * @param array $results, возвращается из SimulationResultTextService::generate()
     * @param string $label
     */
    public function getArray($results, $label) {
        echo sprintf(
            '       $this->assertEquals(
                $results[\'%s\'],
                [
                    \'text\'       => \'%s\',
                    \'short_text\' => \'%s\',
                    \'pocket\'     => [
                        \'left\'  => %s,
                        \'right\' => %s,
                    ]
                ]
            );'."\n"."\n",
            $label,
            $results[$label]['text'],
            $results[$label]['short_text'],
            $results[$label]['pocket']['left'],
            $results[$label]['pocket']['right']
        );
    }
} 